# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/hiviewdfx/faultloggerd/faultloggerd.gni")

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//build/lite/config/test.gni")

  if (ohos_build_type == "debug") {
    fuzztest("FaultloggerdFuzzTest") {
      output_extension = "bin"
      output_dir = "$root_out_dir/test/unittest/faultloggerd"
      include_dirs = [
        "./",
        "//utils/native/base/include",
        "$hilog_lite_include_path",
        "$faultloggerd_path/common",
        "$faultloggerd_path/tools/process_dump",
        "$faultloggerd_path/interfaces/innerkits/dump_catcher/include",
      ]
      cflags_cc = [
        "-g",
        "-O0",
        "-Wno-unused-variable",
        "-fno-omit-frame-pointer",
      ]
      sources = [ "./faultloggerd_fuzzer.cpp" ]
      deps = [
        "$faultloggerd_path/interfaces/innerkits/dump_catcher:lib_dfx_dump_catcher",
        "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      ]
    }
  }

  group("fuzztest") {
    deps = [ ":FaultloggerdFuzzTest" ]
  }
} else {
  import("//build/config/features.gni")
  import("//build/test.gni")

  module_output_path = "faultloggerd/faultloggerd_native"

  ohos_fuzztest("FaultloggerdFuzzTest") {
    module_out_path = module_output_path
    fuzz_config_file = "$faultloggerd_path/test/fuzztest/faultloggerd_fuzzer"
    include_dirs = [ "./" ]
    cflags = [
      "-g",
      "-O0",
      "-Wno-unused-variable",
      "-fno-omit-frame-pointer",
    ]
    sources = [ "faultloggerd_fuzzer.cpp" ]
    deps = [ "$faultloggerd_path/interfaces/innerkits/dump_catcher:lib_dfx_dump_catcher" ]

    external_deps = [
      "hilog_native:libhilog",
      "utils_base:utils",
    ]
  }

  group("fuzztest") {
    testonly = true
    deps = [ ":FaultloggerdFuzzTest" ]
  }
}
